/**
 * 
 */
package com.code.aon.ui.employee.event;

import com.code.aon.company.resources.Employee;
import com.code.aon.config.User;
import com.code.aon.ui.config.controller.UserController;
import com.code.aon.ui.employee.util.Constants;
import com.code.aon.ui.employee.util.Utils;
import com.code.aon.ui.form.event.ControllerAdapter;
import com.code.aon.ui.form.event.ControllerEvent;
import com.code.aon.ui.form.event.ControllerListenerException;
import com.code.aon.ui.util.AonUtil;
import com.code.aon.ui.employee.controller.EmployeeController;

/**
 * The user listener class for receiving employee events. 
 * 
 * @author iayerbe
 *
 */
public class EmployeeUserListener extends ControllerAdapter {

	@Override
	public void afterBeanAdded(ControllerEvent event) throws ControllerListenerException {
		EmployeeController ec = (EmployeeController) event.getController();
		if ( ec.isUserEnabled() ) {
			saveUser( (Employee) ec.getTo() );
		}
	}

	@Override
	public void afterBeanCreated(ControllerEvent event) throws ControllerListenerException {
		UserController uc = 
			(UserController) AonUtil.getController( UserController.MANAGER_BEAN_NAME );
		uc.onReset( null );
	}

//	/* (non-Javadoc)
//	 * @see com.code.aon.ui.form.event.ControllerAdapter#afterBeanSelected(com.code.aon.ui.form.event.ControllerEvent)
//	 * TODO Enable this method after adding the User attribute in the Employee class. 
//	 */
//	@Override
//	public void afterBeanSelected(ControllerEvent event) throws ControllerListenerException {
//		Employee employee = (Employee) event.getController().getTo();
//		UserController uc = 
//			(UserController)AonUtil.getController( UserController.MANAGER_BEAN_NAME );
//		uc.onEditSearch( null );
//		try {
//			String identifier = uc.getManagerBean().getFieldName( IConfigAlias.USER_ID );
//			uc.getCriteria().addEqualExpression( identifier, employee.getUser().getId() );
//			uc.onSearch( null );
//			if ( uc.getModel().getRowCount() > 0 ) {
//				uc.getModel().setRowIndex( 0 );
//				uc.onSelect( null );
//			}
//		} catch (ManagerBeanException e) {
//			Utils.addMessage( e.getMessage(), true );
//		}
//	}

	@Override
	public void afterBeanReset(ControllerEvent event) throws ControllerListenerException {
		UserController uc = 
			(UserController) AonUtil.getController( UserController.MANAGER_BEAN_NAME );
		uc.onReset( null );
	}

	@Override
	public void afterBeanUpdated(ControllerEvent event) throws ControllerListenerException {
		EmployeeController ec = (EmployeeController) event.getController();
		if ( ec.isUserEnabled() ) {
			saveUser( (Employee) ec.getTo() );
//		} else {
//			uc.onRemove( null );
		}
	}

	@Override
	public void beforeBeanRemoved(ControllerEvent event) throws ControllerListenerException {
		UserController uc = 
			(UserController) AonUtil.getController( UserController.MANAGER_BEAN_NAME );
		User u = (User) uc.getTo();
		if ( u.getId() != null ) {
			uc.onRemove( null );
		}
	}

//	/* (non-Javadoc)
//	 * @see com.code.aon.ui.form.event.ControllerAdapter#beforeBeanUpdated(com.code.aon.ui.form.event.ControllerEvent)
//	 */
//	@Override
//	public void beforeBeanUpdated(ControllerEvent event) throws ControllerListenerException {
//		EmployeeController ec = (EmployeeController) event.getController();
//		Employee employee = (Employee) ec.getTo();
//		if ( ec.isUserEnabled() ) {
//			/*
//			 * @TODO what happens with user auto-generated login, name and  password 
//			 * if an employee name, surname or document is updated. 
//			UserController uc = 
//				(UserController) AonUtil.getController( UserController.MANAGER_BEAN_NAME );
//			User u = (User) uc.getTo();
//			String name = employee.getRegistry().getName();
//			String surname = employee.getRegistry().getSurname();
//			if ( !u.getName().equals( name + " " + surname ) ) {
//				String login = getAutoGeneratedLogin( name, surname );
//			}
//			*/
//		} else {
//			employee.setUser( null );
//		}
//	}

	/**
	 * Saves employee user.
	 * 
	 * @param e
	 */
	private void saveUser(Employee e) {
		UserController uc = 
			(UserController) AonUtil.getController( UserController.MANAGER_BEAN_NAME );
		User u = (User) uc.getTo();
		if ( u.getLogin() == null || u.getLogin().equals( Constants.EMPTY_STRING ) ) {
			if ( e.getRegistry().getName() != null && !e.getRegistry().getName().equals( Constants.EMPTY_STRING ) 
					&& e.getRegistry().getSurname() != null && !e.getRegistry().getSurname().equals( Constants.EMPTY_STRING )
					&& e.getRegistry().getDocument() != null  && !e.getRegistry().getDocument().equals( Constants.EMPTY_STRING ) ) {
				String name = e.getRegistry().getName();
				String surname = e.getRegistry().getSurname();
				String login = getAutoGeneratedLogin( name, surname );
				u.setLogin( login );
				u.setName( name + " " + surname );
				u.setAvailable( true );
				u.setStatus( 0 );
				String document = e.getRegistry().getDocument().trim();
				uc.getUserManager().setNewPassword( login.substring(0, 2) + document );
			} else {
				Utils.addMessage( "aon_employee_security_user_create_exception", true );
			}
		}
		uc.accept( null );
	}

	private String getAutoGeneratedLogin(String name, String surname) {
		int index = surname.indexOf( Constants.BLANK_STRING );
		index = ( index > -1 )? index: surname.length();
		return name.substring(0, 1).toLowerCase() + surname.substring( 0, 1 ).toLowerCase() + surname.substring( 1, index ).trim();
		
	}
}